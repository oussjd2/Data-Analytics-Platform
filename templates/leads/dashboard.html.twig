<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Analysis Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .chart-wrapper {
            margin-bottom: 20px;
        }
        .data-table {
            width: 100%;
            margin-top: 10px;
        }
        .chart-explanation {
            font-size: 0.9em;
            color: #666;
        }
        .analysis-result {
            margin-top: 10px;
        }
        .analysis-result h5 {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 5px;
        }
        .analysis-result ul {
            margin-left: 20px;
        }
    </style>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
</head>
<body>
    <div class="container mt-4">
        <h1>Data Analysis Dashboard</h1>

        <div class="mb-3">
            <a href="{{ path('leads_index') }}" class="btn btn-primary">Back to Leads</a>
            <a href="{{ path('leads_custom_chart') }}" class="btn btn-secondary">Custom Chart Builder</a>
        </div>

        <!-- Add date range picker -->
        <div class="mb-3">
            <label for="daterange">Date Range:</label>
            <input type="text" id="daterange" name="daterange" />
        </div>

        <div class="accordion" id="chartsAccordion">
        {% for chartId, config in chartConfigs %}
            <div class="accordion-item">
                <h2 class="accordion-header" id="heading{{ chartId }}">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse{{ chartId }}" aria-expanded="false" aria-controls="collapse{{ chartId }}">
                        {{ config.title }}
                    </button>
                </h2>
                <div id="collapse{{ chartId }}" class="accordion-collapse collapse" aria-labelledby="heading{{ chartId }}" data-bs-parent="#chartsAccordion">
                    <div class="accordion-body">
                        <div class="chart-wrapper">
                            <div style="width: 100%; height: 300px; position: relative;">
                                <canvas id="{{ chartId }}Chart"></canvas>
                            </div>
                            <!-- Add context input -->
                            <div class="mt-2">
                                <label for="{{ chartId }}Context" class="form-label">Additional Context:</label>
                                <textarea id="{{ chartId }}Context" class="form-control" rows="2"></textarea>
                            </div>
                            <button class="btn btn-primary mt-2 analyze-btn" data-chart-id="{{ chartId }}">Get Real-Time Analysis</button>
                            <div id="{{ chartId }}Analysis" class="mt-2 analysis-result"></div>
                            <table class="data-table table table-sm">
                                <thead>
                                    <tr>
                                        <th>Label</th>
                                        <th>Value</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for label, value in chartData[chartId] %}
                                        <tr>
                                            <td>{{ label }}</td>
                                            <td>
                                                {% if chartId in ['conversionByPartner', 'conversionTimeline', 'campaignPerformance'] %}
                                                    {% if value.rate is defined %}
                                                        {{ value.rate }}%
                                                    {% else %}
                                                        {{ value.total }} (Total), {{ value.converted }} (Converted)
                                                    {% endif %}
                                                {% else %}
                                                    {{ value }}
                                                {% endif %}
                                            </td>
                                        </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                            <p class="chart-explanation">
                                {% if chartId == 'sourceDistribution' %}
                                    This chart shows the distribution of lead sources, helping identify the most effective channels for lead generation.
                                {% elseif chartId == 'monthlyLeads' %}
                                    Tracks lead generation over time, allowing for trend analysis and seasonal patterns identification.
                                {% elseif chartId == 'porteurPerformance' %}
                                    Highlights top-performing porteurs, enabling resource allocation optimization and best practice sharing.
                                {% elseif chartId == 'rtcPreference' %}
                                    Illustrates client preferences for RTC (Real-Time Communication), informing communication strategy decisions.
                                {% elseif chartId == 'conversionByPartner' %}
                                    Compares conversion rates across partners, identifying high-performing partnerships and areas for improvement.
                                {% elseif chartId == 'phoneCountryCode' %}
                                    Shows lead distribution by country, guiding international marketing efforts and localization strategies.
                                {% elseif chartId == 'conversionTimeline' %}
                                    This chart displays the lead conversion rate over time, allowing you to identify trends and patterns in your conversion performance. It helps in understanding seasonal effects, the impact of marketing campaigns, and overall conversion rate improvements or declines over time.
                                {% elseif chartId == 'campaignPerformance' %}
                                    This chart showcases the top-performing campaigns based on their conversion rates. It helps in identifying which campaigns are most effective at generating quality leads that convert, allowing for better resource allocation and campaign optimization strategies.
                                {% endif %}
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        {% endfor %}
        </div>

        <!-- Add this new section for Cross-Chart Analysis -->
        <div class="mt-5 mb-5">
            <h2>Cross-Chart Analysis</h2>
            <div class="row mb-3">
                <div class="col-md-3">
                    <select id="chart1" class="form-select">
                        <option value="">Select first chart</option>
                        {% for chartId, config in chartConfigs %}
                            <option value="{{ chartId }}">{{ config.title }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="chart2" class="form-select">
                        <option value="">Select second chart</option>
                        {% for chartId, config in chartConfigs %}
                            <option value="{{ chartId }}">{{ config.title }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-4">
                    <textarea id="crossChartContext" class="form-control" rows="2" placeholder="Add additional context for analysis (optional)"></textarea>
                </div>
                <div class="col-md-2">
                    <button id="crossChartAnalysisBtn" class="btn btn-primary">Perform Cross-Chart Analysis</button>
                </div>
            </div>
            <div class="row mb-4">
                <div class="col-md-6">
                    <div id="chart1Container" style="height: 300px;">
                        <canvas id="chart1Canvas"></canvas>
                    </div>
                </div>
                <div class="col-md-6">
                    <div id="chart2Container" style="height: 300px;">
                        <canvas id="chart2Canvas"></canvas>
                    </div>
                </div>
            </div>
            <div id="crossChartAnalysisResult" class="mt-4"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/jquery/latest/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM Content Loaded');
            console.log('chartData:', {{ chartData|json_encode|raw }});

            const chartConfigs = {{ chartConfigs|json_encode|raw }};
            const globalChartData = {{ chartData|json_encode|raw }};

            // Function to create or update a chart
            function createOrUpdateChart(elementId, type, labels, data, options) {
                console.log('Creating or updating chart:', elementId, type, labels, data, options);
                const ctx = document.getElementById(elementId);
                if (!ctx) {
                    console.error('Canvas element not found:', elementId);
                    return;
                }
                try {
                    let chart = Chart.getChart(elementId);
                    if (chart) {
                        // Update existing chart
                        chart.data.labels = labels;
                        chart.data.datasets[0].data = data;
                        chart.options = options;
                        chart.update();
                    } else {
                        // Create new chart
                        new Chart(ctx, {
                            type: type,
                            data: {
                                labels: labels,
                                datasets: [{
                                    data: data,
                                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']
                                }]
                            },
                            options: options
                        });
                    }
                    console.log('Chart created or updated successfully:', elementId);
                } catch (error) {
                    console.error('Error creating or updating chart:', elementId, error);
                }
            }

            // Initialize date range picker
            $('input[name="daterange"]').daterangepicker({
                opens: 'left',
                startDate: moment().subtract(30, 'days'),
                endDate: moment(),
                ranges: {
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                   'Last 3 Months': [moment().subtract(3, 'months'), moment()],
                   'Last 6 Months': [moment().subtract(6, 'months'), moment()],
                   'This Year': [moment().startOf('year'), moment()]
                }
            }, function(start, end, label) {
                updateCharts(start.format('YYYY-MM-DD'), end.format('YYYY-MM-DD'));
            });

            // Function to update charts based on date range
            function updateCharts(startDate, endDate) {
                $.ajax({
                    url: '{{ path('leads_dashboard_data') }}',
                    data: { startDate: startDate, endDate: endDate },
                    success: function(response) {
                        if (response.error) {
                            console.error('Error fetching chart data:', response.error, response.message);
                            alert('An error occurred while updating the charts: ' + response.message);
                            return;
                        }
                        // Update chart data and redraw all charts
                        Object.assign(globalChartData, response.chartData);
                        Object.keys(chartConfigs).forEach(function(chartId) {
                            updateChart(chartId);
                        });
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        console.error('AJAX error:', textStatus, errorThrown);
                        console.error('Response:', jqXHR.responseText);
                        alert('An error occurred while updating the charts. Please check the console for more details.');
                    }
                });
            }

            function updateChart(chartId) {
                const config = chartConfigs[chartId];
                const data = globalChartData[chartId];
                let chartLabels, chartValues;

                if (['conversionTimeline', 'campaignPerformance', 'conversionByPartner'].includes(chartId)) {
                    chartLabels = Object.keys(data);
                    chartValues = Object.values(data).map(d => d.rate !== undefined ? d.rate : (d.converted / d.total * 100).toFixed(2));
                } else if (chartId === 'monthlyLeads') {
                    chartLabels = Object.keys(data);
                    chartValues = Object.values(data);
                } else {
                    chartLabels = Object.keys(data);
                    chartValues = Object.values(data);
                }

                const options = {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: config.title
                        }
                    }
                };

                if (['conversionByPartner', 'conversionTimeline', 'campaignPerformance'].includes(chartId)) {
                    options.scales = {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                }
                            }
                        }
                    };
                }

                createOrUpdateChart(chartId + 'Chart', config.type, chartLabels, chartValues, options);
            }

            // Create charts when accordion item is shown
            document.querySelectorAll('.accordion-collapse').forEach(item => {
                item.addEventListener('shown.bs.collapse', function () {
                    const chartId = this.id.replace('collapse', '');
                    const config = chartConfigs[chartId];
                    const data = globalChartData[chartId];

                    let chartLabels, chartValues;
                    if (['conversionTimeline', 'campaignPerformance', 'conversionByPartner'].includes(chartId)) {
                        chartLabels = Object.keys(data);
                        chartValues = Object.values(data).map(d => d.rate !== undefined ? d.rate : (d.converted / d.total * 100).toFixed(2));
                    } else {
                        chartLabels = Object.keys(data);
                        chartValues = Object.values(data);
                    }

                    const options = {
                        responsive: true,
                        plugins: {
                            title: {
                                display: true,
                                text: config.title
                            }
                        }
                    };

                    if (['conversionByPartner', 'conversionTimeline', 'campaignPerformance'].includes(chartId)) {
                        options.scales = {
                            y: {
                                beginAtZero: true,
                                max: 100,
                                ticks: {
                                    callback: function(value) {
                                        return value + '%';
                                    }
                                }
                            }
                        };
                    }

                    createOrUpdateChart(chartId + 'Chart', config.type, chartLabels, chartValues, options);
                });
            });

            // Add event listeners for analyze buttons
            document.querySelectorAll('.analyze-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const chartId = this.getAttribute('data-chart-id');
                    const dateRange = document.getElementById('daterange').value;
                    analyzeChart(chartId, dateRange);
                });
            });

            // Function to analyze chart
            function analyzeChart(chartId, dateRange) {
                const chartData = globalChartData[chartId];
                const analysisElement = document.getElementById(`${chartId}Analysis`);
                const contextElement = document.getElementById(`${chartId}Context`);
                analysisElement.innerHTML = 'Analyzing...';

                const formData = new FormData();
                formData.append('chartId', chartId);
                formData.append('chartData', JSON.stringify(chartData));
                formData.append('dateRange', dateRange);
                formData.append('context', contextElement.value);

                fetch('{{ path('analyze_chart') }}', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw err; });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        analysisElement.innerHTML = `<div class="alert alert-danger">${data.error}</div>`;
                    } else {
                        const formattedAnalysis = formatAnalysis(data.analysis);
                        analysisElement.innerHTML = `<div class="alert alert-info">${formattedAnalysis}</div>`;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    analysisElement.innerHTML = `<div class="alert alert-danger">An error occurred during analysis: ${error.message || 'Unknown error'}</div>`;
                });
            }

            function formatAnalysis(analysis) {
                const sections = [
                    'Key Observations',
                    'Data Interpretation',
                    'Actionable Insights',
                    'Potential Risks or Opportunities',
                    'Recommendations'
                ];

                let formattedHtml = '';

                sections.forEach(section => {
                    const regex = new RegExp(`${section}:([\\s\\S]*?)(?=(${sections.join('|')}:|$))`, 'i');
                    const match = analysis.match(regex);

                    if (match) {
                        formattedHtml += `<h5>${section}</h5>`;
                        const content = match[1].trim();
                        const bulletPoints = content.split('•').filter(point => point.trim() !== '');
                        
                        if (bulletPoints.length > 1) {
                            formattedHtml += '<ul>';
                            bulletPoints.forEach(point => {
                                formattedHtml += `<li>${point.trim()}</li>`;
                            });
                            formattedHtml += '</ul>';
                        } else {
                            formattedHtml += `<p>${content}</p>`;
                        }
                    }
                });

                return formattedHtml;
            }

            // Add event listeners for chart selection dropdowns
            document.getElementById('chart1').addEventListener('change', updateSelectedChart);
            document.getElementById('chart2').addEventListener('change', updateSelectedChart);

            function updateSelectedChart(event) {
                const chartId = event.target.value;
                const canvasId = event.target.id === 'chart1' ? 'chart1Canvas' : 'chart2Canvas';
                if (chartId) {
                    const config = chartConfigs[chartId];
                    const data = globalChartData[chartId];
                    let chartLabels, chartValues;

                    if (['conversionTimeline', 'campaignPerformance', 'conversionByPartner'].includes(chartId)) {
                        chartLabels = Object.keys(data);
                        chartValues = Object.values(data).map(d => d.rate !== undefined ? d.rate : (d.converted / d.total * 100).toFixed(2));
                    } else {
                        chartLabels = Object.keys(data);
                        chartValues = Object.values(data);
                    }

                    const options = {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: {
                                display: true,
                                text: config.title
                            }
                        }
                    };

                    if (['conversionByPartner', 'conversionTimeline', 'campaignPerformance'].includes(chartId)) {
                        options.scales = {
                            y: {
                                beginAtZero: true,
                                max: 100,
                                ticks: {
                                    callback: function(value) {
                                        return value + '%';
                                    }
                                }
                            }
                        };
                    }

                    createOrUpdateChart(canvasId, config.type, chartLabels, chartValues, options);
                } else {
                    // Clear the chart if no option is selected
                    const ctx = document.getElementById(canvasId).getContext('2d');
                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                }
            }

            // Add event listener for cross-chart analysis button
            document.getElementById('crossChartAnalysisBtn').addEventListener('click', function() {
                const chart1 = document.getElementById('chart1').value;
                const chart2 = document.getElementById('chart2').value;
                const dateRange = document.getElementById('daterange').value;

                if (!chart1 || !chart2) {
                    alert('Please select two charts for analysis.');
                    return;
                }

                performCrossChartAnalysis(chart1, chart2, dateRange);
            });

            function performCrossChartAnalysis(chart1, chart2, dateRange) {
                const analysisElement = document.getElementById('crossChartAnalysisResult');
                const contextElement = document.getElementById('crossChartContext');
                analysisElement.innerHTML = '<div class="alert alert-info">Analyzing...</div>';

                const formData = new FormData();
                formData.append('chart1', chart1);
                formData.append('chart2', chart2);
                formData.append('chartData1', JSON.stringify(globalChartData[chart1]));
                formData.append('chartData2', JSON.stringify(globalChartData[chart2]));
                formData.append('dateRange', dateRange);
                formData.append('context', contextElement.value);

                fetch('{{ path('cross_chart_analysis') }}', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw err; });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        analysisElement.innerHTML = `<div class="alert alert-danger">${data.error}</div>`;
                    } else {
                        const formattedAnalysis = formatAnalysis(data.analysis);
                        analysisElement.innerHTML = `<div class="alert alert-info">${formattedAnalysis}</div>`;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    analysisElement.innerHTML = `<div class="alert alert-danger">An error occurred during analysis: ${error.message || 'Unknown error'}</div>`;
                });
            }
        });
    </script>
</body>
</html>